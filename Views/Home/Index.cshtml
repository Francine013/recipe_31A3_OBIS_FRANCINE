@model IEnumerable<PF_LAB4_31A3_OBIS_FRANCINE.Data.Recipe>
@{
    ViewData["Title"] = "Home Page";
}

<div class="text-center">
    <h1 class="display-4">Recipe Website</h1>
    <div class="row row-cols-1 row-cols-sm-2 row-cols-md-3 row-cols-lg-5 g-4">
        <div class="col">
            <a href="javascript:void(0);" onclick="openAddModal()"
               class="card h-100 shadow-sm border-0 d-flex align-items-center justify-content-center text-decoration-none add-card">
                <div class="text-center">
                    <i class="bi bi-plus-circle" style="font-size: 3rem; color: #6c757d;"></i>
                    <p class="mt-2 text-muted">Add Recipe</p>
                </div>
            </a>
        </div>

        @foreach (var recipe in Model)
        {
            <div class="col" id="recipe-card-@recipe.Id">
                <div class="card h-100 shadow-sm">
                    <div class="card-body d-flex flex-column">
                        <h5 class="card-title">@recipe.Name</h5>
                        <p class="card-text flex-grow-1">
                            <small class="text-muted">Ingredients: @(recipe.Ingredients?.Length > 50 ? recipe.Ingredients.Substring(0, 50) + "..." : recipe.Ingredients)</small>
                        </p>
                        <div class="mt-auto">
                            <div class="btn-group w-100" role="group">
                                <button class="btn btn-outline-primary btn-sm" onclick="viewRecipe(@recipe.Id)">View</button>
                                <button class="btn btn-outline-warning btn-sm" onclick="editRecipe(@recipe.Id)">Edit</button>
                                <button class="btn btn-outline-danger btn-sm" onclick="deleteRecipe(@recipe.Id)">Delete</button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        }
    </div>
</div>

<!-- Add/Edit Recipe Modal -->
<div class="modal fade" id="recipeModal" tabindex="-1">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="recipeModalTitle">Add Recipe</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <form id="recipeForm">
                    <input type="hidden" id="recipeId" value="0">

                    <div class="mb-3">
                        <label for="recipeName" class="form-label">Recipe Name *</label>
                        <input type="text" class="form-control" id="recipeName" required>
                    </div>

                    <div class="mb-3">
                        <label class="form-label">Ingredients *</label>
                        <div id="ingredientsContainer">
                            <div class="ingredient-row mb-2">
                                <div class="row">
                                    <div class="col-md-5">
                                        <input type="text" class="form-control ingredient-name" placeholder="Ingredient name" required>
                                    </div>
                                    <div class="col-md-3">
                                        <input type="number" class="form-control ingredient-quantity" placeholder="Quantity" min="1" required>
                                    </div>
                                    <div class="col-md-3">
                                        <select class="form-control ingredient-uom">
                                            <option value="tbsp">tbsp</option>
                                            <option value="tsp">tsp</option>
                                            <option value="cups">cups</option>
                                            <option value="pieces">pieces</option>
                                            <option value="mg">mg</option>
                                            <option value="grams">grams</option>
                                            <option value="kg">kg</option>
                                            <option value="ml">ml</option>
                                            <option value="lbs">lbs</option>
                                        </select>
                                    </div>
                                    <div class="col-md-1">
                                        <button type="button" class="btn btn-outline-danger btn-sm remove-ingredient">×</button>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <button type="button" class="btn btn-outline-success btn-sm" onclick="addIngredientRow()">+ Add Ingredient</button>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" onclick="saveRecipe()">Save Recipe</button>
            </div>
        </div>
    </div>
</div>


<div class="modal fade" id="viewModal" tabindex="-1">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="viewModalTitle">Recipe Details</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body" id="viewModalBody">
            </div>
        </div>
    </div>
</div>

<style>
    .add-card {
        background-color: #f8f9fa;
        border: 2px dashed #dee2e6 !important;
        transition: all 0.3s ease;
    }

        .add-card:hover {
            background-color: #e9ecef;
            border-color: #adb5bd !important;
            text-decoration: none;
        }
</style>

<script>

    function addIngredientRow() {
        const container = document.getElementById('ingredientsContainer');
        const newRow = document.createElement('div');
        newRow.className = 'ingredient-row mb-2';
        newRow.innerHTML = `
            <div class="row">
                <div class="col-md-5">
                    <input type="text" class="form-control ingredient-name" placeholder="Ingredient name" required>
                </div>
                <div class="col-md-3">
                    <input type="number" class="form-control ingredient-quantity" placeholder="Quantity" min="1" required>
                </div>
                <div class="col-md-3">
                    <select class="form-control ingredient-uom">
                        <option value="tbsp">tbsp</option>
                        <option value="tsp">tsp</option>
                        <option value="cups">cups</option>
                        <option value="pieces">pieces</option>
                        <option value="grams">grams</option>
                        <option value="ml">ml</option>
                        <option value="lbs">lbs</option>
                    </select>
                </div>
                <div class="col-md-1">
                    <button type="button" class="btn btn-outline-danger btn-sm remove-ingredient">×</button>
                </div>
            </div>
        `;
        container.appendChild(newRow);

      
        newRow.querySelector('.remove-ingredient').addEventListener('click', function() {
            if (document.querySelectorAll('.ingredient-row').length > 1) {
                newRow.remove();
            }
        });
    }

    document.addEventListener('click', function(e) {
        if (e.target.classList.contains('remove-ingredient')) {
            if (document.querySelectorAll('.ingredient-row').length > 1) {
                e.target.closest('.ingredient-row').remove();
            }
        }
    });

    function openAddModal() {
        document.getElementById('recipeModalTitle').textContent = 'Add Recipe';
        document.getElementById('recipeForm').reset();
        document.getElementById('recipeId').value = '0';


        const container = document.getElementById('ingredientsContainer');
        container.innerHTML = `
            <div class="ingredient-row mb-2">
                <div class="row">
                    <div class="col-md-5">
                        <input type="text" class="form-control ingredient-name" placeholder="Ingredient name" required>
                    </div>
                    <div class="col-md-3">
                        <input type="number" class="form-control ingredient-quantity" placeholder="Quantity" min="1" required>
                    </div>
                    <div class="col-md-3">
                        <select class="form-control ingredient-uom">
                            <option value="tbsp">tbsp</option>
                            <option value="tsp">tsp</option>
                            <option value="cups">cups</option>
                            <option value="pieces">pieces</option>
                            <option value="grams">grams</option>
                            <option value="ml">ml</option>
                            <option value="lbs">lbs</option>
                        </select>
                    </div>
                    <div class="col-md-1">
                        <button type="button" class="btn btn-outline-danger btn-sm remove-ingredient">×</button>
                    </div>
                </div>
            </div>
        `;

        new bootstrap.Modal(document.getElementById('recipeModal')).show();
    }


    async function editRecipe(id) {
        try {
            const response = await fetch(`/Home/GetRecipe/${id}`);
            const result = await response.json();

            if (result.success) {
                const recipe = result.recipe;

                document.getElementById('recipeModalTitle').textContent = 'Edit Recipe';
                document.getElementById('recipeId').value = id;
                document.getElementById('recipeName').value = recipe.name;


                try {
                    const ingredients = JSON.parse(recipe.ingredients);
                    const container = document.getElementById('ingredientsContainer');
                    container.innerHTML = '';

                    ingredients.forEach(ingredient => {
                        const row = document.createElement('div');
                        row.className = 'ingredient-row mb-2';
                        row.innerHTML = `
                            <div class="row">
                                <div class="col-md-5">
                                    <input type="text" class="form-control ingredient-name" placeholder="Ingredient name" value="${ingredient.name}" required>
                                </div>
                                <div class="col-md-3">
                                    <input type="number" class="form-control ingredient-quantity" placeholder="Quantity" value="${ingredient.quantity}" min="1" required>
                                </div>
                                <div class="col-md-3">
                                    <select class="form-control ingredient-uom">
                                        <option value="tbsp" ${ingredient.uom === 'tbsp' ? 'selected' : ''}>tbsp</option>
                                        <option value="tsp" ${ingredient.uom === 'tsp' ? 'selected' : ''}>tsp</option>
                                        <option value="cups" ${ingredient.uom === 'cups' ? 'selected' : ''}>cups</option>
                                        <option value="pieces" ${ingredient.uom === 'pieces' ? 'selected' : ''}>pieces</option>
                                        <option value="grams" ${ingredient.uom === 'grams' ? 'selected' : ''}>grams</option>
                                        <option value="ml" ${ingredient.uom === 'ml' ? 'selected' : ''}>ml</option>
                                        <option value="lbs" ${ingredient.uom === 'lbs' ? 'selected' : ''}>lbs</option>
                                    </select>
                                </div>
                                <div class="col-md-1">
                                    <button type="button" class="btn btn-outline-danger btn-sm remove-ingredient">×</button>
                                </div>
                            </div>
                        `;
                        container.appendChild(row);
                    });
                } catch (e) {
                    console.error('Error parsing ingredients:', e);
                }

                new bootstrap.Modal(document.getElementById('recipeModal')).show();
            }
        } catch (error) {
            console.error('Error loading recipe:', error);
            alert('Error loading recipe');
        }
    }


    async function viewRecipe(id) {
        try {
            const response = await fetch(`/Home/GetRecipe/${id}`);
            const result = await response.json();

            if (result.success) {
                const recipe = result.recipe;
                document.getElementById('viewModalTitle').textContent = recipe.name;

                let ingredientsHtml = '';
                try {
                    const ingredients = JSON.parse(recipe.ingredients);
                    ingredientsHtml = '<ul class="list-group list-group-flush">';
                    ingredients.forEach(ingredient => {
                        ingredientsHtml += `<li class="list-group-item">${ingredient.quantity} ${ingredient.uom} ${ingredient.name}</li>`;
                    });
                    ingredientsHtml += '</ul>';
                } catch (e) {
                    ingredientsHtml = `<p class="text-muted">${recipe.ingredients}</p>`;
                }

                document.getElementById('viewModalBody').innerHTML = `
                    <div class="mb-3">
                        <h6>Ingredients:</h6>
                        ${ingredientsHtml}
                    </div>
                `;

                new bootstrap.Modal(document.getElementById('viewModal')).show();
            }
        } catch (error) {
            console.error('Error loading recipe:', error);
            alert('Error loading recipe');
        }
    }

    async function deleteRecipe(id) {
        if (!confirm('Are you sure you want to delete this recipe?')) {
            return;
        }

        try {
            const response = await fetch(`/Home/DeleteRecipe/${id}`, {
                method: 'DELETE'
            });

            const result = await response.json();

            if (result.success) {
               
                document.getElementById(`recipe-card-${id}`).remove();
            } else {
                alert('Error deleting recipe: ' + result.message);
            }
        } catch (error) {
            console.error('Error deleting recipe:', error);
            alert('Error deleting recipe');
        }
    }

    async function saveRecipe() {
        const name = document.getElementById('recipeName').value.trim();
        const id = parseInt(document.getElementById('recipeId').value);

        if (!name) {
            alert('Recipe name is required!');
            return;
        }

        const ingredientRows = document.querySelectorAll('.ingredient-row');
        const ingredients = [];

        for (let row of ingredientRows) {
            const nameInput = row.querySelector('.ingredient-name').value.trim();
            const quantityInput = row.querySelector('.ingredient-quantity').value;
            const uomInput = row.querySelector('.ingredient-uom').value;

            if (nameInput && quantityInput) {
                ingredients.push({
                    name: nameInput,
                    quantity: parseInt(quantityInput),
                    uom: uomInput
                });
            }
        }

        if (ingredients.length === 0) {
            alert('At least one ingredient is required!');
            return;
        }

        const recipeData = {
            id: id,
            name: name,
            ingredients: JSON.stringify(ingredients)
        };

        try {
            let response;
            if (id === 0) {
               
                response = await fetch('/Home/CreateRecipe', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify(recipeData)
                });
            } else {
             
                response = await fetch(`/Home/UpdateRecipe/${id}`, {
                    method: 'PUT',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify(recipeData)
                });
            }

            const result = await response.json();

            if (result.success) {
                bootstrap.Modal.getInstance(document.getElementById('recipeModal')).hide();
                location.reload(); 
            } else {
                alert('Error saving recipe: ' + result.message);
            }
        } catch (error) {
            console.error('Error saving recipe:', error);
            alert('Error saving recipe');
        }
    }
</script>